#!/bin/bash

clear

#############################
# Fun√ß√£o para exibir o menu #
#############################
menu_idioma() {
  printf "\n"
  printf "Escolha seu idioma / Choose your language / Elija su idioma / Choisissez votre langue / Scegli la tua lingua\n"
  printf "1) Portugu√™s\n"
  printf "2) English\n"
  printf "3) Espa√±ol\n"
  printf "4) Fran√ßais\n"
  printf "5) Italiano\n"
  printf "\n"
  printf "Digite o n√∫mero / Enter the number / Escriba el n√∫mero / Entrez le num√©ro / Inserisci il numero\n"
  read -p "> " idioma
}

#########################################
# Definir mensagens no idioma escolhido #
#########################################
definir_mensagens() {
  case $idioma in
    1)
      # Portugu√™s
      msg_passo1="Passo 1: Insira o seu e-mail para configurar o Let's Encrypt (certificado ssl) no Traefik:"
      msg_solicita_email="üìß Por favor, insira seu e-mail:"
      msg_email_valido="‚úÖ Email v√°lido: "
      msg_email_invalido="‚ùå Email inv√°lido. Tente novamente."

      msg_passo2="Passo 2: Baixando Stack Traefik:"
      msg_baixando_stack="üîÑ Substituindo o e-mail no arquivo..."
      msg_stack_ok="‚úÖ Stack Traefik baixada e e-mail substitu√≠do com sucesso."
      msg_stack_erro="‚ùå Erro: Arquivo final da Stack Traefik est√° vazio ou n√£o foi gerado corretamente."
      
      msg_passo3="Passo 3: Atualizando Reposit√≥rios"
      msg_repo_ok="‚úÖ Reposit√≥rios atualizados com sucesso."
      msg_repo_erro="‚ùå Erro ao atualizar reposit√≥rios."

      msg_passo4="Passo 4: Verificando Chave GPG do Docker"
      msg_docker_chave_pular="‚ö†Ô∏è Chave GPG do Docker j√° existe. Pulando."
      msg_docker_chave_ok="‚úÖ Chave GPG adicionada com sucesso."
      msg_docker_chave_erro="‚ùå Erro ao adicionar chave GPG."
      
      msg_passo5="Passo 5: Configurando Reposit√≥rios do Docker"
      msg_repositorio_docker_pular="‚ö†Ô∏è Reposit√≥rios do Docker j√° configurados. Pulando."
      msg_repositorio_docker_ok="‚úÖ Reposit√≥rios do Docker configurados com sucesso."
      msg_repositorio_docker_erro="‚ùå Erro ao configurar reposit√≥rios do Docker."
      
      msg_passo6="Passo 6: Instalando Docker"
      msg_docker_ok="‚úÖ Docker instalado com sucesso."
      msg_docker_erro="‚ùå Erro ao instalar o Docker."
      msg_docker_pular="‚ö†Ô∏è Docker j√° instalado. Pulando."
      
      msg_passo7="Passo 7: Configurando Docker para iniciar automaticamente"
      msg_docker_iniciar_automaticamente_pular="‚ö†Ô∏è Docker j√° configurado para iniciar automaticamente."
      msg_docker_iniciar_automaticamente_ok="‚úÖ Servi√ßo Docker configurado para iniciar automaticamente."

      msg_passo8="Passo 8: Obtendo IP da m√°quina"
      msg_obter_ip_erro="‚ùå Erro ao obter IP da m√°quina."
      msg_obter_ip_ok="‚úÖ IP da m√°quina:"
      
      msg_passo9="Passo 9: Verificando Docker Swarm"
      msg_docker_swarm_pular="‚ö†Ô∏è Docker Swarm j√° inicializado. Pulando."
      msg_docker_swarm_ok="‚úÖ Docker Swarm inicializado com sucesso."
      msg_docker_swarm_erro="‚ùå Erro ao inicializar Docker Swarm."

      msg_passo10="Passo 10: Verificando Rede 'network_swarm_public'"
      msg_docker_network_swarm_pular="‚ö†Ô∏è Rede 'network_swarm_public' j√° existe. Pulando."
      msg_docker_network_swarm_ok="‚úÖ Rede 'network_swarm_public' criada com sucesso."
      msg_docker_network_swarm_erro="‚ùå Erro ao criar a rede."
      
      msg_passo11="Passo 11: Subindo Stack Traefik"
      msg_stack_traefik_ok="‚úÖ Stack Traefik implantada com sucesso!"
      msg_stack_traefik_erro="‚ùå Erro ao implantar Stack Traefik."
      
      msg_script_executado_ok="üöÄ Script executado com sucesso!"
      ;;
    2)
      # English
      msg_passo1="Step 1: Enter your email to configure Let's Encrypt (SSL certificate) in Traefik:"
      msg_solicita_email="üìß Please enter your email:"
      msg_email_valido="‚úÖ Valid email: "
      msg_email_invalido="‚ùå Invalid email. Please try again."

      msg_passo2="Step 2: Downloading Traefik Stack:"
      msg_baixando_stack="üîÑ Replacing the email in the file..."
      msg_stack_ok="‚úÖ Traefik stack downloaded and email replaced successfully."
      msg_stack_erro="‚ùå Error: Final Traefik stack file is empty or not generated correctly."
      
      msg_passo3="Step 3: Updating Repositories"
      msg_repo_ok="‚úÖ Repositories updated successfully."
      msg_repo_erro="‚ùå Error updating repositories."

      msg_passo4="Step 4: Checking Docker GPG Key"
      msg_docker_chave_pular="‚ö†Ô∏è Docker GPG key already exists. Skipping."
      msg_docker_chave_ok="‚úÖ GPG key added successfully."
      msg_docker_chave_erro="‚ùå Error adding GPG key."
      
      msg_passo5="Step 5: Configuring Docker Repositories"
      msg_repositorio_docker_pular="‚ö†Ô∏è Docker repositories already configured. Skipping."
      msg_repositorio_docker_ok="‚úÖ Docker repositories configured successfully."
      msg_repositorio_docker_erro="‚ùå Error configuring Docker repositories."
      
      msg_passo6="Step 6: Installing Docker"
      msg_docker_ok="‚úÖ Docker installed successfully."
      msg_docker_erro="‚ùå Error installing Docker."
      msg_docker_pular="‚ö†Ô∏è Docker already installed. Skipping."
      
      msg_passo7="Step 7: Configuring Docker to start automatically"
      msg_docker_iniciar_automaticamente_pular="‚ö†Ô∏è Docker already set to start automatically."
      msg_docker_iniciar_automaticamente_ok="‚úÖ Docker service set to start automatically."

      msg_passo8="Step 8: Obtaining machine IP"
      msg_obter_ip_erro="‚ùå Error obtaining machine IP."
      msg_obter_ip_ok="‚úÖ Machine IP:"
      
      msg_passo9="Step 9: Checking Docker Swarm"
      msg_docker_swarm_pular="‚ö†Ô∏è Docker Swarm already initialized. Skipping."
      msg_docker_swarm_ok="‚úÖ Docker Swarm initialized successfully."
      msg_docker_swarm_erro="‚ùå Error initializing Docker Swarm."

      msg_passo10="Step 10: Checking 'network_swarm_public' Network"
      msg_docker_network_swarm_pular="‚ö†Ô∏è 'network_swarm_public' already exists. Skipping."
      msg_docker_network_swarm_ok="‚úÖ 'network_swarm_public' network created successfully."
      msg_docker_network_swarm_erro="‚ùå Error creating network."
      
      msg_passo11="Step 11: Deploying Traefik Stack"
      msg_stack_traefik_ok="‚úÖ Traefik stack deployed successfully!"
      msg_stack_traefik_erro="‚ùå Error deploying Traefik stack."
      
      msg_script_executado_ok="üöÄ Script executed successfully!"
      ;;
    3)
      # Espa√±ol
      msg_passo1="Paso 1: Ingrese su correo electr√≥nico para configurar Let's Encrypt (certificado SSL) en Traefik:"
      msg_solicita_email="üìß Por favor ingrese su correo electr√≥nico:"
      msg_email_valido="‚úÖ Correo v√°lido: "
      msg_email_invalido="‚ùå Correo inv√°lido. Int√©ntalo de nuevo."

      msg_passo2="Paso 2: Descargando Stack Traefik:"
      msg_baixando_stack="üîÑ Reemplazando el correo en el archivo..."
      msg_stack_ok="‚úÖ Traefik descargado y correo reemplazado correctamente."
      msg_stack_erro="‚ùå Error: Archivo final de la Stack Traefik est√° vac√≠o o no se gener√≥ correctamente."
      
      msg_passo3="Paso 3: Actualizando Repositorios"
      msg_repo_ok="‚úÖ Repositorios actualizados correctamente."
      msg_repo_erro="‚ùå Error al actualizar repositorios."

      msg_passo4="Paso 4: Verificaci√≥n de la Clave GPG de Docker"
      msg_docker_chave_pular="‚ö†Ô∏è La clave GPG de Docker ya existe. Omitiendo."
      msg_docker_chave_ok="‚úÖ Clave GPG a√±adida correctamente."
      msg_docker_chave_erro="‚ùå Error al a√±adir la clave GPG."
      
      msg_passo5="Paso 5: Configurando los Repositorios de Docker"
      msg_repositorio_docker_pular="‚ö†Ô∏è Repositorios de Docker ya configurados. Omitiendo."
      msg_repositorio_docker_ok="‚úÖ Repositorios de Docker configurados correctamente."
      msg_repositorio_docker_erro="‚ùå Error al configurar repositorios de Docker."
      
      msg_passo6="Paso 6: Instalando Docker"
      msg_docker_ok="‚úÖ Docker instalado correctamente."
      msg_docker_erro="‚ùå Error al instalar Docker."
      msg_docker_pular="‚ö†Ô∏è Docker ya est√° instalado. Omitiendo."
      
      msg_passo7="Paso 7: Configurando Docker para que inicie autom√°ticamente"
      msg_docker_iniciar_automaticamente_pular="‚ö†Ô∏è Docker ya est√° configurado para iniciar autom√°ticamente."
      msg_docker_iniciar_automaticamente_ok="‚úÖ Docker configurado para iniciar autom√°ticamente."

      msg_passo8="Paso 8: Obteniendo la IP de la m√°quina"
      msg_obter_ip_erro="‚ùå Error al obtener la IP de la m√°quina."
      msg_obter_ip_ok="‚úÖ IP de la m√°quina:"
      
      msg_passo9="Paso 9: Verificando Docker Swarm"
      msg_docker_swarm_pular="‚ö†Ô∏è Docker Swarm ya est√° inicializado. Omitiendo."
      msg_docker_swarm_ok="‚úÖ Docker Swarm inicializado correctamente."
      msg_docker_swarm_erro="‚ùå Error al inicializar Docker Swarm."

      msg_passo10="Paso 10: Verificando la Red 'network_swarm_public'"
      msg_docker_network_swarm_pular="‚ö†Ô∏è La red 'network_swarm_public' ya existe. Omitiendo."
      msg_docker_network_swarm_ok="‚úÖ Red 'network_swarm_public' creada correctamente."
      msg_docker_network_swarm_erro="‚ùå Error al crear la red."
      
      msg_passo11="Paso 11: Desplegando Stack Traefik"
      msg_stack_traefik_ok="‚úÖ Stack Traefik desplegada correctamente!"
      msg_stack_traefik_erro="‚ùå Error al desplegar Stack Traefik."
      
      msg_script_executado_ok="üöÄ ¬°Script ejecutado correctamente!"
      ;;
    4)
      # Fran√ßais
      msg_passo1="√âtape 1: Entrez votre email pour configurer Let's Encrypt (certificat SSL) dans Traefik:"
      msg_solicita_email="üìß Veuillez entrer votre email:"
      msg_email_valido="‚úÖ Email valide: "
      msg_email_invalido="‚ùå Email invalide. Veuillez r√©essayer."

      msg_passo2="√âtape 2: T√©l√©chargement de la Stack Traefik:"
      msg_baixando_stack="üîÑ Remplacement de l'email dans le fichier..."
      msg_stack_ok="‚úÖ Stack Traefik t√©l√©charg√©e et email remplac√© avec succ√®s."
      msg_stack_erro="‚ùå Erreur: Le fichier final de la Stack Traefik est vide ou non g√©n√©r√© correctement."
      
      msg_passo3="√âtape 3: Mise √† jour des R√©f√©rentiels"
      msg_repo_ok="‚úÖ R√©f√©rentiels mis √† jour avec succ√®s."
      msg_repo_erro="‚ùå Erreur lors de la mise √† jour des r√©f√©rentiels."

      msg_passo4="√âtape 4: V√©rification de la Cl√© GPG de Docker"
      msg_docker_chave_pular="‚ö†Ô∏è La cl√© GPG Docker existe d√©j√†. Passage."
      msg_docker_chave_ok="‚úÖ Cl√© GPG ajout√©e avec succ√®s."
      msg_docker_chave_erro="‚ùå Erreur lors de l'ajout de la cl√© GPG."
      
      msg_passo5="√âtape 5: Configuration des R√©f√©rentiels Docker"
      msg_repositorio_docker_pular="‚ö†Ô∏è Les r√©f√©rentiels Docker sont d√©j√† configur√©s. Passage."
      msg_repositorio_docker_ok="‚úÖ R√©f√©rentiels Docker configur√©s avec succ√®s."
      msg_repositorio_docker_erro="‚ùå Erreur lors de la configuration des r√©f√©rentiels Docker."
      
      msg_passo6="√âtape 6: Installation de Docker"
      msg_docker_ok="‚úÖ Docker install√© avec succ√®s."
      msg_docker_erro="‚ùå Erreur lors de l'installation de Docker."
      msg_docker_pular="‚ö†Ô∏è Docker est d√©j√† install√©. Passage."
      
      msg_passo7="√âtape 7: Configuration de Docker pour d√©marrer automatiquement"
      msg_docker_iniciar_automaticamente_pular="‚ö†Ô∏è Docker est d√©j√† configur√© pour d√©marrer automatiquement."
      msg_docker_iniciar_automaticamente_ok="‚úÖ Docker configur√© pour d√©marrer automatiquement."

      msg_passo8="√âtape 8: Obtention de l'IP de la machine"
      msg_obter_ip_erro="‚ùå Erreur lors de l'obtention de l'IP de la machine."
      msg_obter_ip_ok="‚úÖ IP de la machine:"
      
      msg_passo9="√âtape 9: V√©rification du Docker Swarm"
      msg_docker_swarm_pular="‚ö†Ô∏è Docker Swarm est d√©j√† initialis√©. Passage."
      msg_docker_swarm_ok="‚úÖ Docker Swarm initialis√© avec succ√®s."
      msg_docker_swarm_erro="‚ùå Erreur lors de l'initialisation de Docker Swarm."

      msg_passo10="√âtape 10: V√©rification du R√©seau 'network_swarm_public'"
      msg_docker_network_swarm_pular="‚ö†Ô∏è Le r√©seau 'network_swarm_public' existe d√©j√†. Passage."
      msg_docker_network_swarm_ok="‚úÖ R√©seau 'network_swarm_public' cr√©√© avec succ√®s."
      msg_docker_network_swarm_erro="‚ùå Erreur lors de la cr√©ation du r√©seau."
      
      msg_passo11="√âtape 11: D√©ploiement de la Stack Traefik"
      msg_stack_traefik_ok="‚úÖ Stack Traefik d√©ploy√©e avec succ√®s!"
      msg_stack_traefik_erro="‚ùå Erreur lors du d√©ploiement de la Stack Traefik."
      
      msg_script_executado_ok="üöÄ Script ex√©cut√© avec succ√®s!"
      ;;
    5)
      # Italiano
      msg_passo1="Fase 1: Inserisci la tua email per configurare Let's Encrypt (certificato SSL) in Traefik:"
      msg_solicita_email="üìß Si prega di inserire la tua email:"
      msg_email_valido="‚úÖ Email valido: "
      msg_email_invalido="‚ùå Email non valido. Riprova."

      msg_passo2="Fase 2: Scaricamento dello Stack Traefik:"
      msg_baixando_stack="üîÑ Sostituendo l'email nel file..."
      msg_stack_ok="‚úÖ Stack Traefik scaricato e email sostituito con successo."
      msg_stack_erro="‚ùå Errore: Il file finale dello Stack Traefik √® vuoto o non generato correttamente."
      
      msg_passo3="Fase 3: Aggiornamento dei Repositori"
      msg_repo_ok="‚úÖ Repositori aggiornati con successo."
      msg_repo_erro="‚ùå Errore durante l'aggiornamento dei repositori."

      msg_passo4="Fase 4: Verifica della Chiave GPG Docker"
      msg_docker_chave_pular="‚ö†Ô∏è Chiave GPG Docker gi√† esistente. Salto."
      msg_docker_chave_ok="‚úÖ Chiave GPG aggiunta con successo."
      msg_docker_chave_erro="‚ùå Errore durante l'aggiunta della chiave GPG."
      
      msg_passo5="Fase 5: Configurazione dei Repositori Docker"
      msg_repositorio_docker_pular="‚ö†Ô∏è Repositori Docker gi√† configurati. Salto."
      msg_repositorio_docker_ok="‚úÖ Repositori Docker configurati con successo."
      msg_repositorio_docker_erro="‚ùå Errore nella configurazione dei repositori Docker."
      
      msg_passo6="Fase 6: Installazione di Docker"
      msg_docker_ok="‚úÖ Docker installato con successo."
      msg_docker_erro="‚ùå Errore durante l'installazione di Docker."
      msg_docker_pular="‚ö†Ô∏è Docker gi√† installato. Salto."
      
      msg_passo7="Fase 7: Configurazione di Docker per l'avvio automatico"
      msg_docker_iniciar_automaticamente_pular="‚ö†Ô∏è Docker gi√† configurato per l'avvio automatico."
      msg_docker_iniciar_automaticamente_ok="‚úÖ Docker configurato per l'avvio automatico."

      msg_passo8="Fase 8: Ottenimento dell'IP della macchina"
      msg_obter_ip_erro="‚ùå Errore durante l'ottenimento dell'IP della macchina."
      msg_obter_ip_ok="‚úÖ IP della macchina:"
      
      msg_passo9="Fase 9: Verifica Docker Swarm"
      msg_docker_swarm_pular="‚ö†Ô∏è Docker Swarm gi√† inizializzato. Salto."
      msg_docker_swarm_ok="‚úÖ Docker Swarm inizializzato con successo."
      msg_docker_swarm_erro="‚ùå Errore durante l'inizializzazione di Docker Swarm."

      msg_passo10="Fase 10: Verifica della Rete 'network_swarm_public'"
      msg_docker_network_swarm_pular="‚ö†Ô∏è Rete 'network_swarm_public' gi√† esistente. Salto."
      msg_docker_network_swarm_ok="‚úÖ Rete 'network_swarm_public' creata con successo."
      msg_docker_network_swarm_erro="‚ùå Errore nella creazione della rete."
      
      msg_passo11="Fase 11: Distribuzione dello Stack Traefik"
      msg_stack_traefik_ok="‚úÖ Stack Traefik distribuito con successo!"
      msg_stack_traefik_erro="‚ùå Errore durante la distribuzione dello Stack Traefik."
      
      msg_script_executado_ok="üöÄ Script eseguito con successo!"
      ;;
    *)
      echo "Op√ß√£o inv√°lida. Tente novamente. / Invalid option. Please try again. / Opci√≥n inv√°lida. Int√©ntalo de nuevo. / Option invalide. Veuillez r√©essayer. / Opzione non valida. Riprova."
      return 1
      ;;
  esac
  return 0
}

##############################
# Loop para garantir escolha #
##############################
while true; do
  menu_idioma
  if definir_mensagens; then
    break
  fi
done

#############################################################
# Fun√ß√£o para imprimir uma linha de caracteres com um texto #
#############################################################
print_with_line() {
    local texto="$1"        # O texto a ser exibido
    local tamanho=${#texto} # Conta o n√∫mero de caracteres na string
    local caracter="="

    # Repete o caractere pelo tamanho da string
    local repeticao=$(printf "%${tamanho}s" | tr " " "$caracter")

    echo "$repeticao"  # Exibe a linha de caracteres superior
    echo "$texto"      # Exibe o texto
    echo "$repeticao"  # Exibe a linha de caracteres inferior
}

#############################
# Fun√ß√£o para validar email #
#############################
validar_email() {
  local email="$1"
  if [[ "$email" =~ ^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$ ]]; then
    return 0
  else
    return 1
  fi
}

##########################################
# Passo 1: Solicitar o e-mail do usu√°rio #
##########################################
print_with_line "$msg_passo1"

while true; do
  echo -e "\n$msg_solicita_email"
  read -p "> " EMAIL
  if validar_email "$EMAIL"; then
    echo -e "\n$msg_email_valido $EMAIL"
    echo "----------------"
    break
  else
    echo -e "$msg_email_invalido"
  fi
done

#################################
# Passo 2: Baixar stack Traefik #
#################################
print_with_line "$msg_passo2"
echo "$msg_baixando_stack"

curl -s https://raw.githubusercontent.com/marioguima/email-marketing-lucrativo/main/stack-traefik-v2.yml | sed "s/meuemail@email.com/${EMAIL}/g" > stack-traefik-v2.yml

if [[ -s stack-traefik-v2.yml ]]; then
  echo -e "$msg_stack_ok"
else
  echo -e "$msg_stack_erro"
  exit 1
fi


################################
# Passo 3: Update reposit√≥rios #
################################
print_with_line "$msg_passo3"

apt-get update && apt install -y sudo gnupg2 wget ca-certificates apt-transport-https curl gnupg nano htop

if [ $? -eq 0 ]; then
    echo -e "$msg_repo_ok"
else
    echo -e "$msg_repo_erro"
    exit 1
fi


#########################################
# Passo 4: Baixar e configurar o Docker #
#########################################
print_with_line "$msg_passo4"

if [ ! -f /etc/apt/keyrings/docker.gpg ]; then
    sudo install -m 0755 -d /etc/apt/keyrings
    curl -fsSL https://download.docker.com/linux/debian/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
    sudo chmod a+r /etc/apt/keyrings/docker.gpg
else
    echo "$msg_docker_chave_pular"
fi

if [ $? -eq 0 ]; then
    echo -e "$msg_docker_chave_ok"
else
    echo -e "$msg_docker_chave_erro"
    exit 1
fi

################################################
# Passo 5: Configurando Reposit√≥rios do Docker #
################################################
print_with_line "$msg_passo5"

if [ ! -f /etc/apt/sources.list.d/docker.list ]; then
    echo "deb [arch="$(dpkg --print-architecture)" signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/debian \
    "$(. /etc/os-release && echo "$VERSION_CODENAME")" stable" | sudo tee /etc/apt/sources.list.d/docker.list >/dev/null
    sudo apt-get update
else
    echo "$msg_repositorio_docker_pular"
fi

if [ $? -eq 0 ]; then
    echo -e "$msg_repositorio_docker_ok"
else
    echo -e "$msg_repositorio_docker_erro"
    exit 1
fi

############################
# Passo 6: Instalar Docker #
############################
print_with_line "$msg_passo6"

if ! command -v docker &> /dev/null; then
    sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
    if [ $? -eq 0 ]; then
        echo -e "$msg_docker_ok"
    else
        echo -e "$msg_docker_erro"
        exit 1
    fi
else
    echo "$msg_docker_pular"
fi

###########################################################
# Passo 7: Configurar Docker para iniciar automaticamente #
###########################################################
print_with_line "$msg_passo7"

if systemctl is-enabled docker.service | grep -q "enabled"; then
    echo "$msg_docker_iniciar_automaticamente_pular"
else
    sudo systemctl enable docker.service
    sudo systemctl enable containerd.service
    echo "$msg_docker_iniciar_automaticamente_ok"
fi

##################################
# Passo 8: Obter o IP da m√°quina #
##################################
print_with_line "$msg_passo8"

IP_ADDR=$(hostname -I | awk '{print $1}')

if [ -z "$IP_ADDR" ]; then
    echo -e "$msg_obter_ip_erro"
    exit 1
else
    echo -e "$msg_obter_ip_ok $IP_ADDR"
fi

###########################################################
# Passo 9: Verificar se Docker Swarm j√° est√° inicializado #
###########################################################
print_with_line "$msg_passo9"

if docker info | grep -q "Swarm: active"; then
    echo "$msg_docker_swarm_pular"
else
    docker swarm init --advertise-addr=$IP_ADDR
    if [ $? -eq 0 ]; then
        echo -e "$msg_docker_swarm_ok"
    else
        echo -e "$msg_docker_swarm_erro"
        exit 1
    fi
fi

####################################
# Passo 10: Verificar/criar a rede #
####################################
print_with_line "$msg_passo10"

if docker network ls | grep -q "network_swarm_public"; then
    echo "$msg_docker_network_swarm_pular"
else
    docker network create --driver=overlay network_swarm_public
    if [ $? -eq 0 ]; then
        echo -e "$msg_docker_network_swarm_ok"
    else
        echo -e "$msg_docker_network_swarm_erro"
        exit 1
    fi
fi

####################################
# Passo 11: Subir stack do Traefik #
####################################
print_with_line "$msg_passo11"

docker stack deploy --prune --detach=false --resolve-image always -c stack-traefik-v2.yml traefik

if [ $? -eq 0 ]; then
    echo -e "$msg_stack_traefik_ok"
else
    echo -e "$msg_stack_traefik_erro"
    exit 1
fi

echo -e "\n$msg_script_executado_ok"
